type: "orchestration"
version: "1.0"
pipeline:
  components:
    Start 0:
      type: "start"
      transitions:
        unconditional:
        - "Python Script 1"
        - "Python Script 2"
      skipped: false
      parameters:
        componentName: "Start 0"
    Python Script 1:
      type: "python-script"
      transitions:
        unconditional:
        - "Create Table TEST_BRANCH1"
      skipped: false
      parameters:
        componentName: "Python Script 1"
        script: "###\n# Variables are directly accessible: \n#   print (myvar)\n#\
          \ Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n\
          # Grid Variables are accessible via the context:\n#   print (context.getGridVariable('mygridvar'))\n\
          # Updating a grid variable:\n#   context.updateGridVariable('mygridvar',\
          \ [['list','of'],['lists','!']])\n# A database cursor can be accessed from\
          \ the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select\
          \ count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\ncontext.updateVariable('jv_val_1',\
          \ 'Branch_shared1')\nprint(jv_val_1)\ncontext.updateVariable('jv_val_2',\
          \ 'Branch_copied1')\nprint(jv_val_2)"
        interpreter: "Python 3"
        timeout: "360"
    Python Script 2:
      type: "python-script"
      transitions:
        unconditional:
        - "Create Table TEST_BRANCH2"
      skipped: false
      parameters:
        componentName: "Python Script 2"
        script: "###\n# Variables are directly accessible: \n#   print (myvar)\n#\
          \ Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n\
          # Grid Variables are accessible via the context:\n#   print (context.getGridVariable('mygridvar'))\n\
          # Updating a grid variable:\n#   context.updateGridVariable('mygridvar',\
          \ [['list','of'],['lists','!']])\n# A database cursor can be accessed from\
          \ the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select\
          \ count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\ncontext.updateVariable('jv_val_1',\
          \ 'Branch_shared2')\nprint(jv_val_1)\ncontext.updateVariable('jv_val_2',\
          \ 'Branch_copied2')\nprint(jv_val_2)\nprint(project_name)"
        interpreter: "Python 3"
        timeout: "360"
    Create Table TEST_BRANCH1:
      type: "create-table-v2"
      transitions:
        unconditional:
        - "And 0"
      skipped: false
      parameters:
        componentName: "Create Table TEST_BRANCH1"
        createMethod: "Replace"
        database: "[Environment Default]"
        schema: "[Environment Default]"
        table: "TEST_BRANCH1"
        snowflakeTableType: "Permanent"
        columns:
        - - "${jv_val_1}"
          - "VARCHAR"
          - "100"
          - ""
          - ""
          - "No"
          - "No"
          - ""
          - ""
        - - "${jv_val_2}"
          - "VARCHAR"
          - "100"
          - ""
          - ""
          - "No"
          - "No"
          - ""
          - ""
        defaultDdlCollation: ""
        primaryKeys:
        clusteringKeys:
        dataRetentionTimeInDays: ""
        comment: ""
    Create Table TEST_BRANCH2:
      type: "create-table-v2"
      transitions:
        unconditional:
        - "And 0"
      skipped: false
      parameters:
        componentName: "Create Table TEST_BRANCH2"
        createMethod: "Replace"
        database: "[Environment Default]"
        schema: "[Environment Default]"
        table: "TEST_BRANCH2"
        snowflakeTableType: "Permanent"
        columns:
        - - "${jv_val_1}"
          - "VARCHAR"
          - "100"
          - ""
          - ""
          - "No"
          - "No"
          - ""
          - ""
        - - "${jv_val_2}"
          - "VARCHAR"
          - "100"
          - ""
          - ""
          - "No"
          - "No"
          - ""
          - ""
        defaultDdlCollation: ""
        primaryKeys:
        clusteringKeys:
        dataRetentionTimeInDays: ""
        comment: ""
    And 0:
      type: "and"
      transitions:
        unconditional:
        - "Create Table TEST"
      skipped: false
      parameters:
        componentName: "And 0"
    Create Table TEST:
      type: "create-table-v2"
      skipped: false
      parameters:
        componentName: "Create Table TEST"
        createMethod: "Replace"
        database: "[Environment Default]"
        schema: "[Environment Default]"
        table: "TEST"
        snowflakeTableType: "Permanent"
        columns:
        - - "${jv_val_1}"
          - "VARCHAR"
          - "100"
          - ""
          - ""
          - "No"
          - "No"
          - ""
          - ""
        - - "${jv_val_2}"
          - "VARCHAR"
          - "100"
          - ""
          - ""
          - "No"
          - "No"
          - ""
          - ""
        defaultDdlCollation: ""
        primaryKeys:
        clusteringKeys:
        dataRetentionTimeInDays: ""
        comment: ""
  variables:
    jv_val_1:
      metadata:
        type: "TEXT"
        description: ""
        scope: "SHARED"
        visibility: "PUBLIC"
      defaultValue: "COL_1"
    jv_val_2:
      metadata:
        type: "TEXT"
        description: ""
        scope: "COPIED"
        visibility: "PUBLIC"
      defaultValue: "COL_2"
design:
  components:
    Start 0:
      position:
        x: -560
        "y": -32
      tempMetlId: 2939
    Python Script 1:
      position:
        x: -384
        "y": -112
      tempMetlId: 2954
    Python Script 2:
      position:
        x: -384
        "y": 48
      tempMetlId: 2957
    Create Table TEST_BRANCH1:
      position:
        x: -224
        "y": -112
      tempMetlId: 2997
    Create Table TEST_BRANCH2:
      position:
        x: -224
        "y": 48
      tempMetlId: 3004
    And 0:
      position:
        x: -16
        "y": -16
      tempMetlId: 3014
    Create Table TEST:
      position:
        x: 144
        "y": -16
      tempMetlId: 3055
